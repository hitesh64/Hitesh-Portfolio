p5-animation.js// p5.js Interactive Background Animation
document.addEventListener('DOMContentLoaded', function() {
    // Create p5 canvas container if not exists
    let p5Container = document.getElementById('p5-container');
    if (!p5Container) {
        p5Container = document.createElement('div');
        p5Container.id = 'p5-container';
        p5Container.className = 'p5-container';
        document.body.insertBefore(p5Container, document.body.firstChild);
    }

    // p5.js sketch
    const sketch = (p) => {
        let particles = [];
        const particleCount = 50;
        let themeColors = {
            dark: { bg: [26, 26, 46, 20], particle: [76, 201, 240] },
            light: { bg: [248, 249, 250, 20], particle: [67, 97, 238] },
            neon: { bg: [15, 15, 36, 20], particle: [247, 37, 133] }
        };
        let currentTheme = 'dark';

        p.setup = function() {
            const canvas = p.createCanvas(p.windowWidth, p.windowHeight);
            canvas.position(0, 0);
            canvas.style('z-index', '-1');
            canvas.style('position', 'fixed');
            
            // Create particles
            for (let i = 0; i < particleCount; i++) {
                particles.push(new Particle());
            }
        };

        p.draw = function() {
            // Set background with transparency for trailing effect
            p.background(...themeColors[currentTheme].bg);
            
            // Update and display particles
            particles.forEach(particle => {
                particle.update();
                particle.display();
                particle.connect(particles);
            });
        };

        p.windowResized = function() {
            p.resizeCanvas(p.windowWidth, p.windowHeight);
        };

        // Particle class
        class Particle {
            constructor() {
                this.pos = p.createVector(p.random(p.width), p.random(p.height));
                this.vel = p.createVector(p.random(-1, 1), p.random(-1, 1));
                this.acc = p.createVector(0, 0);
                this.maxSpeed = 2;
                this.size = p.random(3, 8);
                this.color = themeColors[currentTheme].particle;
            }

            update() {
                this.vel.add(this.acc);
                this.vel.limit(this.maxSpeed);
                this.pos.add(this.vel);
                this.acc.mult(0);
                
                // Wrap around edges
                if (this.pos.x > p.width) this.pos.x = 0;
                if (this.pos.x < 0) this.pos.x = p.width;
                if (this.pos.y > p.height) this.pos.y = 0;
                if (this.pos.y < 0) this.pos.y = p.height;
            }

            display() {
                p.noStroke();
                p.fill(...this.color);
                p.ellipse(this.pos.x, this.pos.y, this.size);
            }

            connect(particles) {
                particles.forEach(other => {
                    const d = p.dist(this.pos.x, this.pos.y, other.pos.x, other.pos.y);
                    if (d < 150) {
                        p.stroke(...this.color, 100);
                        p.strokeWeight(0.5);
                        p.line(this.pos.x, this.pos.y, other.pos.x, other.pos.y);
                    }
                });
            }
        }

        // Handle theme changes
        const themeButtons = document.querySelectorAll('.theme-btn');
        themeButtons.forEach(button => {
            button.addEventListener('click', function() {
                currentTheme = this.classList.contains('light') ? 'light' : 
                              this.classList.contains('neon') ? 'neon' : 'dark';
            });
        });
    };

    // Initialize p5
    new p5(sketch, 'p5-container');
});